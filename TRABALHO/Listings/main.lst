C51 COMPILER V9.60.7.0   MAIN                                                              12/30/2023 02:52:59 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\Objects\main.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE main.c OPTIMIZE(0,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings\main
                    -.lst) TABS(2) OBJECT(.\Objects\main.obj)

line level    source

   1          #include <REG51F380.H>
   2          #include <stdio.h>
   3          #include "lcd1602.h"
   4          #include "config_platform.h"
   5          #include "serialIO.h"
   6          #include "delay.h"
   7          
   8          
   9          unsigned char buffTemp[10];
  10          unsigned char buffHum[8];
  11          
  12          sbit PB1 = P0^6;
  13          
  14          // LCD ADDRESS 0x27
  15          #define LCD_ADDR_W 0x4E
  16          #define LCD_ADDR_R 0x4F
  17          
  18          
  19          /*********************************************************
  20           * main loop                                             *
  21           *********************************************************/
  22          void main(void){
  23   1        
  24   1        //char rc;
  25   1        //char c = 0;
  26   1        
  27   1        char i;
  28   1        //char j;
  29   1        
  30   1      
  31   1        Init_Device();
  32   1        uart0_initialize();
  33   1        timer2_init_auto(-40000);
  34   1        
  35   1        
  36   1        
  37   1        //Set by hardware when the Timer 2/3 high byte overflows from 0xFF to 0x00. In 16 bit 
  38   1        //mode, this will occur when Timer 2/3 overflows from 0xFFFF to 0x0000.   
  39   1        TF2H = 0; 
  40   1        TMR3CN &= ~(1 << B_TF3H);
  41   1        
  42   1        //ET2 = 1;
  43   1        //EIE1 |= (1 << B_ET3);
  44   1        
  45   1        // Timer 2/3 Run Control. Timer 2/3 is enabled by setting this bit to 1. 
  46   1        TMR3CN |= (1 << B_TR3);
  47   1        TR2 = 1;
  48   1        
  49   1        EA=1; //enable interrupts
  50   1        
  51   1      
  52   1        
  53   1        
  54   1          while(1){
C51 COMPILER V9.60.7.0   MAIN                                                              12/30/2023 02:52:59 PAGE 2   

  55   2            
  56   2          //c = _getkey();
  57   2          //putchar(c);
  58   2            
  59   2          /*  
  60   2          for (i = 0; i < 16; i++){
  61   2            buff[i] = uart0_getchar();
  62   2          }
  63   2            */
  64   2          
  65   2           for (i = 0; i < 16; i++) {
  66   3              char c = uart0_getchar();
  67   3      
  68   3              if (i < 9) {
  69   4                  buffTemp[i] = c;
  70   4              }
  71   3      
  72   3              if (i >= 9 && i < 16) {
  73   4                  buffHum[i - 9] = c;
  74   4              }
  75   3          }
  76   2          
  77   2          buffTemp[9] = '\0';
  78   2          buffHum[7] = '\0';
  79   2            
  80   2          lcd1602Clear(LCD_ADDR_W);     // clear the memory
  81   2      
  82   2          lcd1602Control(LCD_ADDR_W, 1,1,1); // backlight on, underline on, blink block on 
  83   2          
  84   2          lcd1602SetCursor(LCD_ADDR_W, 0, 0);
  85   2              
  86   2          //delay_s(1);
  87   2            
  88   2      
  89   2          lcd1602WriteString(LCD_ADDR_W, buffTemp);
  90   2      
  91   2          
  92   2            
  93   2          lcd1602Control(LCD_ADDR_W, 1,1,1); // backlight on, underline off, blink block on 
  94   2      //    
  95   2          lcd1602SetCursor(LCD_ADDR_W, 0, 1);
  96   2      //    
  97   2          
  98   2      //    
  99   2          lcd1602WriteString(LCD_ADDR_W, buffHum);
 100   2      //    
 101   2          delay_s(1);
 102   2      //    delay_s(1);
 103   2      //    delay_s(1);
 104   2      //    delay_s(1);
 105   2      //    delay_s(1);
 106   2      //    
 107   2          lcd1602Shutdown(LCD_ADDR_W);
 108   2      //    
 109   2          lcd1602Init(LCD_ADDR_W);
 110   2      
 111   2      //    lcd1602Control(LCD_ADDR_W, 1,0,1); // backlight on, underline on, blink block on 
 112   2      //    
 113   2      //    lcd1602SetCursor(LCD_ADDR_W, 0, 0);
 114   2      //    
 115   2      //    delay_s(0.5);
 116   2      
C51 COMPILER V9.60.7.0   MAIN                                                              12/30/2023 02:52:59 PAGE 3   

 117   2      //    
 118   2      //    lcd1602WriteString(LCD_ADDR_W, "HELLO AGAIN!!");
 119   2      //    
 120   2      //    lcd1602Control(LCD_ADDR_W, 1,1,1); // backlight on, underline on, blink block on 
 121   2      //    
 122   2      //    lcd1602SetCursor(LCD_ADDR_W, 0, 1);
 123   2      
 124   2      //    delay_s(1);
 125   2      
 126   2            
 127   2          
 128   2        }
 129   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    182    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     20    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
