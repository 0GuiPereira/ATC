C51 COMPILER V9.60.7.0   MAIN                                                              12/30/2023 03:33:00 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\Objects\main.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE main.c OPTIMIZE(0,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings\main
                    -.lst) TABS(2) OBJECT(.\Objects\main.obj)

line level    source

   1          #include <REG51F380.H>
   2          #include <stdio.h>
   3          #include "lcd1602.h"
   4          #include "config_platform.h"
   5          #include "serialIO.h"
   6          #include "delay.h"
   7          
   8          
   9          unsigned char buffTemp[16];
  10          unsigned char buffHum[16];
  11          
  12          
  13          // LCD ADDRESS 0x27
  14          #define LCD_ADDR_W 0x4E
  15          #define LCD_ADDR_R 0x4F
  16          
  17          
  18          /*********************************************************
  19           * main loop                                             *
  20           *********************************************************/
  21          void main(void){
  22   1        
  23   1        //char rc;
  24   1        //char c = 0;
  25   1        
  26   1        char i;
  27   1        //char j;
  28   1        
  29   1      
  30   1        Init_Device();
  31   1        uart0_initialize();
  32   1        timer2_init_auto(-40000);
  33   1        
  34   1        
  35   1        
  36   1        //Set by hardware when the Timer 2/3 high byte overflows from 0xFF to 0x00. In 16 bit 
  37   1        //mode, this will occur when Timer 2/3 overflows from 0xFFFF to 0x0000.   
  38   1        TF2H = 0; 
  39   1        TMR3CN &= ~(1 << B_TF3H);
  40   1        
  41   1        //ET2 = 1;
  42   1        //EIE1 |= (1 << B_ET3);
  43   1        
  44   1        // Timer 2/3 Run Control. Timer 2/3 is enabled by setting this bit to 1. 
  45   1        TMR3CN |= (1 << B_TR3);
  46   1        TR2 = 1;
  47   1        
  48   1        EA=1; //enable interrupts
  49   1        
  50   1      
  51   1        
  52   1        
  53   1          while(1){
  54   2            
C51 COMPILER V9.60.7.0   MAIN                                                              12/30/2023 03:33:00 PAGE 2   

  55   2          //c = _getkey();
  56   2          //putchar(c);
  57   2            
  58   2          /*  
  59   2          for (i = 0; i < 16; i++){
  60   2            buff[i] = uart0_getchar();
  61   2          }
  62   2            */
  63   2          
  64   2           for (i = 0; i < 32; i++) {
  65   3              char c = uart0_getchar();
  66   3      
  67   3              if (i < 16) {
  68   4                  buffTemp[i] = c;
  69   4              }
  70   3      
  71   3              if (i >= 16 && i < 32) {
  72   4                  buffHum[i - 16] = c;
  73   4              }
  74   3          }
  75   2          
  76   2          //buffTemp[15] = '\0';
  77   2          //buffHum[15] = '\0';
  78   2            
  79   2          lcd1602Clear(LCD_ADDR_W);     // clear the memory
  80   2      
  81   2          lcd1602Control(LCD_ADDR_W, 1,0,0); // backlight on, underline on, blink block on 
  82   2          
  83   2          lcd1602SetCursor(LCD_ADDR_W, 0, 0);
  84   2              
  85   2          //delay_s(1);
  86   2            
  87   2      
  88   2          lcd1602WriteString(LCD_ADDR_W, buffTemp);
  89   2      
  90   2          
  91   2            
  92   2          lcd1602Control(LCD_ADDR_W, 1,0,0); // backlight on, underline off, blink block on 
  93   2      //    
  94   2          lcd1602SetCursor(LCD_ADDR_W, 0, 1);
  95   2      //    
  96   2          
  97   2      //    
  98   2          lcd1602WriteString(LCD_ADDR_W, buffHum);
  99   2      //    
 100   2          delay_s(1);
 101   2      //    delay_s(1);
 102   2      //    delay_s(1);
 103   2      //    delay_s(1);
 104   2      //    delay_s(1);
 105   2      //    
 106   2          lcd1602Shutdown(LCD_ADDR_W);
 107   2      //    
 108   2          lcd1602Init(LCD_ADDR_W);
 109   2      
 110   2      //    lcd1602Control(LCD_ADDR_W, 1,0,1); // backlight on, underline on, blink block on 
 111   2      //    
 112   2      //    lcd1602SetCursor(LCD_ADDR_W, 0, 0);
 113   2      //    
 114   2      //    delay_s(0.5);
 115   2      
 116   2      //    
C51 COMPILER V9.60.7.0   MAIN                                                              12/30/2023 03:33:00 PAGE 3   

 117   2      //    lcd1602WriteString(LCD_ADDR_W, "HELLO AGAIN!!");
 118   2      //    
 119   2      //    lcd1602Control(LCD_ADDR_W, 1,1,1); // backlight on, underline on, blink block on 
 120   2      //    
 121   2      //    lcd1602SetCursor(LCD_ADDR_W, 0, 1);
 122   2      
 123   2      //    delay_s(1);
 124   2      
 125   2            
 126   2          
 127   2        }
 128   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    176    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     34    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
