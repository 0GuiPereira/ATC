C51 COMPILER V9.60.7.0   MAIN                                                              12/29/2023 16:49:00 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\Objects\main.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE main.c OPTIMIZE(0,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings\main
                    -.lst) TABS(2) OBJECT(.\Objects\main.obj)

line level    source

   1          #include <REG51F380.H>
   2          #include <stdio.h>
   3          #include "lcd1602.h"
   4          #include "config_platform.h"
   5          #include "serialIO.h"
   6          #include "delay.h"
   7          
   8          
   9          
  10          sbit PB1 = P0^6;
  11          
  12          // LCD ADDRESS 0x27
  13          #define LCD_ADDR_W 0x4E
  14          #define LCD_ADDR_R 0x4F
  15          
  16          
  17          /*********************************************************
  18           * main loop                                             *
  19           *********************************************************/
  20          void main(void){
  21   1        
  22   1        char rc;
  23   1        char c = 0;
  24   1        
  25   1      
  26   1        Init_Device();
  27   1        uart0_initialize();
  28   1        //timer2_init_auto(-40000);
  29   1        
  30   1        
  31   1        
  32   1        //Set by hardware when the Timer 2/3 high byte overflows from 0xFF to 0x00. In 16 bit 
  33   1        //mode, this will occur when Timer 2/3 overflows from 0xFFFF to 0x0000.   
  34   1        TF2H = 0; 
  35   1        TMR3CN &= ~(1 << B_TF3H);
  36   1        
  37   1        //ET2 = 1;
  38   1        //EIE1 |= (1 << B_ET3);
  39   1        
  40   1        // Timer 2/3 Run Control. Timer 2/3 is enabled by setting this bit to 1. 
  41   1        TMR3CN |= (1 << B_TR3);
  42   1        TR2 = 1;
  43   1        
  44   1        EA=1; //enable interrupts
  45   1        
  46   1      
  47   1        
  48   1        
  49   1          while(1){
  50   2            
  51   2          c = _getkey();
  52   2          putchar(c);
  53   2            
  54   2      //    lcd1602Clear(LCD_ADDR_W);     // clear the memory
C51 COMPILER V9.60.7.0   MAIN                                                              12/29/2023 16:49:00 PAGE 2   

  55   2      
  56   2      //    lcd1602Control(LCD_ADDR_W, 1,0,1); // backlight on, underline on, blink block on 
  57   2      //    
  58   2      //    lcd1602SetCursor(LCD_ADDR_W, 0, 0);
  59   2      //        
  60   2      //    P2 = 0x86;
  61   2      //    randTemp();
  62   2      //    randTemp();
  63   2      //    delay_s(1);
  64   2      //    P2 = 0xC6;
  65   2      //      
  66   2      //    
  67   2      //    
  68   2      //    lcd1602WriteString(LCD_ADDR_W, "OLAAA");
  69   2      //      
  70   2      //    lcd1602Control(LCD_ADDR_W, 1,0,1); // backlight on, underline off, blink block on 
  71   2      //    
  72   2      //    lcd1602SetCursor(LCD_ADDR_W, 5, 1);
  73   2      //    
  74   2      //    delay_s(1);
  75   2      //    
  76   2      //    lcd1602WriteString(LCD_ADDR_W, "STAY COOL!!!");
  77   2      //    
  78   2      //    delay_s(1);
  79   2      //    
  80   2      //    lcd1602Shutdown(LCD_ADDR_W);
  81   2      //    
  82   2      //    lcd1602Init(LCD_ADDR_W);
  83   2      
  84   2      //    lcd1602Control(LCD_ADDR_W, 1,0,1); // backlight on, underline on, blink block on 
  85   2      //    
  86   2      //    lcd1602SetCursor(LCD_ADDR_W, 0, 0);
  87   2      //    
  88   2      //    delay_s(1);
  89   2      //    
  90   2      //    lcd1602WriteString(LCD_ADDR_W, "HELLO AGAIN!!");
  91   2      //    
  92   2      //    lcd1602Control(LCD_ADDR_W, 1,1,1); // backlight on, underline on, blink block on 
  93   2      //    
  94   2      //    lcd1602SetCursor(LCD_ADDR_W, 0, 1);
  95   2      
  96   2      //    delay_s(1);
  97   2      
  98   2            
  99   2          
 100   2        }
 101   1      }
*** WARNING C280 IN LINE 22 OF main.c: 'rc': unreferenced local variable


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =     32    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      2    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  1 WARNING(S),  0 ERROR(S)
