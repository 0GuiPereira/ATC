C51 COMPILER V9.60.7.0   LCD1602                                                           12/30/2023 02:52:59 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE LCD1602
OBJECT MODULE PLACED IN .\Objects\lcd1602.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE lcd1602.c OPTIMIZE(0,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings\l
                    -cd1602.lst) TABS(2) OBJECT(.\Objects\lcd1602.obj)

line level    source

   1          #include "lcd1602.h"
   2          #include "i2c-bitbang.h" 
   3          
   4          #define NULL 0
   5          
   6          #define PULSE_PERIOD 500
   7          #define CMD_PERIOD 5000
   8          
   9          #define BACKLIGHT 8
  10          #define DATA 1
  11          static int iBackLight = BACKLIGHT;
  12          
  13          
  14          
  15          /*
  16          SDA - P0.2
  17          SCLK - P0.3
  18          GND - GND
  19          VCC - 5V
  20          */
  21          
  22          
  23          
  24          void wait(unsigned int pulses){
  25   1        int i;
  26   1        
  27   1        for (i = 0; i < pulses; i++);
  28   1      }
  29          
  30          
  31          // Send a command to LCD
  32          //
  33          static void WriteCommand(unsigned char iAddr, unsigned char ucCMD)
  34          {
  35   1      unsigned char uc;
  36   1      unsigned char rc;
  37   1      
  38   1        i2c_start();
  39   1        i2c_write(iAddr);
  40   1        rc = read_ack();
  41   1        
  42   1        uc = (ucCMD & 0xf0) | iBackLight; // most significant nibble sent first 
  43   1        i2c_write(uc);
  44   1        rc = read_ack();
  45   1        
  46   1        wait(PULSE_PERIOD); // manually pulse the clock line
  47   1        uc |= 4; // enable pulse
  48   1        i2c_write(uc);
  49   1        rc = read_ack();
  50   1        
  51   1        wait(PULSE_PERIOD);
  52   1        uc &= ~4; // toggle pulse
  53   1        i2c_write(uc);
  54   1        rc = read_ack();
C51 COMPILER V9.60.7.0   LCD1602                                                           12/30/2023 02:52:59 PAGE 2   

  55   1        
  56   1        wait(CMD_PERIOD);
  57   1        uc = iBackLight | (ucCMD << 4); // least significant nibble
  58   1        i2c_write(uc);
  59   1        rc = read_ack();
  60   1        
  61   1        wait(PULSE_PERIOD);
  62   1        uc |= 4; // enable pulse
  63   1        i2c_write(uc);
  64   1        rc = read_ack();
  65   1        
  66   1        wait(PULSE_PERIOD);
  67   1        uc &= ~4; // toggle pulse
  68   1        i2c_write(uc);
  69   1        rc = read_ack();
  70   1            
  71   1        wait(CMD_PERIOD);
  72   1        
  73   1        i2c_stop();
  74   1      
  75   1      } /* WriteCommand() */
  76          
  77          //
  78          // Write an ASCII string (up to 16 characters at a time)
  79          // 
  80          int lcd1602WriteString(unsigned char iAddr, char *text)
  81          {
  82   1      unsigned char ucTemp;
  83   1      int i = 0;
  84   1      unsigned char rc;
  85   1      
  86   1        if (text == NULL)
  87   1          return 1;
  88   1      
  89   1        i2c_start();
  90   1        i2c_write(iAddr);
  91   1        rc = read_ack();  
  92   1        
  93   1        while (i<16 && *text)
  94   1        {
  95   2          ucTemp = iBackLight | DATA | (*text & 0xf0);
  96   2          i2c_write(ucTemp);
  97   2          rc = read_ack();
  98   2          
  99   2          wait(PULSE_PERIOD);
 100   2          ucTemp |= 4; // pulse E
 101   2          i2c_write(ucTemp);
 102   2          rc = read_ack();
 103   2          
 104   2          wait(PULSE_PERIOD);
 105   2          ucTemp &= ~4;
 106   2          i2c_write(ucTemp);
 107   2          rc = read_ack();
 108   2          
 109   2          wait(PULSE_PERIOD);
 110   2          ucTemp = iBackLight | DATA | (*text << 4);
 111   2          i2c_write(ucTemp);
 112   2          rc = read_ack();
 113   2          
 114   2          ucTemp |= 4; // pulse E
 115   2          i2c_write(ucTemp);
 116   2          rc = read_ack();
C51 COMPILER V9.60.7.0   LCD1602                                                           12/30/2023 02:52:59 PAGE 3   

 117   2          
 118   2          wait(PULSE_PERIOD);
 119   2          ucTemp &= ~4;
 120   2          i2c_write(ucTemp);
 121   2          rc = read_ack();
 122   2          
 123   2          wait(CMD_PERIOD);
 124   2          text++;
 125   2          i++;
 126   2        }
 127   1        
 128   1        i2c_stop();
 129   1        
 130   1        return 0;
 131   1      }
 132          
 133          
 134          // Open a file handle to the I2C device
 135          // Set the controller into 4-bit mode and clear the display
 136          // returns 0 for success, 1 for failure
 137          //
 138          int lcd1602Init(unsigned char iAddr){
 139   1        
 140   1        i2c_start();
 141   1        i2c_write(iAddr);
 142   1        read_ack();
 143   1        i2c_stop();
 144   1        wait(1000);
 145   1        
 146   1        iBackLight = BACKLIGHT; // turn on backlight
 147   1        WriteCommand(iAddr, 0x02); // Set 4-bit mode of the LCD controller
 148   1        WriteCommand(iAddr, 0x28); // 2 lines, 5x8 dot matrix
 149   1        WriteCommand(iAddr, 0x0c); // display on, cursor off
 150   1        WriteCommand(iAddr, 0x06); // inc cursor to right when writing and don't scroll
 151   1        WriteCommand(iAddr, 0x80); // set cursor to row 1, column 1
 152   1        lcd1602Clear(iAddr);      // clear the memory
 153   1      
 154   1        return 0;
 155   1      }
 156          
 157          //
 158          // Erase the display memory and reset the cursor to 0,0
 159          //
 160          int lcd1602Clear(unsigned char iAddr)
 161          {
 162   1        WriteCommand(iAddr, 0x01); // clear the screen
 163   1        return 0;
 164   1      
 165   1      }
 166          
 167          //
 168          // Set the LCD cursor position
 169          //
 170          int lcd1602SetCursor(unsigned char iAddr, unsigned char x, unsigned char y)
 171          {
 172   1      unsigned char cCmd;
 173   1      
 174   1        if (x < 0 || x > 15 || y < 0 || y > 1)
 175   1          return 1;
 176   1      
 177   1        cCmd = (y==0) ? 0x80 : 0xc0;
 178   1        cCmd |= x;
C51 COMPILER V9.60.7.0   LCD1602                                                           12/30/2023 02:52:59 PAGE 4   

 179   1        WriteCommand(iAddr, cCmd);
 180   1        return 0;
 181   1      
 182   1      } /* lcd1602SetCursor() */
 183          
 184          //
 185          // Control the backlight, cursor, and blink
 186          // The cursor is an underline and is separate and distinct
 187          // from the blinking block option
 188          //
 189          int lcd1602Control(unsigned char iAddr, unsigned char bBacklight, unsigned char bCursor, unsigned char bBl
             -ink)
 190          {
 191   1      unsigned char ucCMD = 0xc; // display control
 192   1      
 193   1        iBackLight = (bBacklight) ? BACKLIGHT : 0;
 194   1        if (bCursor)
 195   1          ucCMD |= 2;
 196   1        if (bBlink)
 197   1          ucCMD |= 1;
 198   1        WriteCommand(iAddr, ucCMD);
 199   1        
 200   1        return 0;
 201   1      } /* lcd1602Control() */
 202          
 203          void lcd1602Shutdown(unsigned char iAddr)
 204          {
 205   1        iBackLight = 0; // turn off backlight
 206   1        WriteCommand(iAddr, 0x08); // turn off display, cursor and blink  
 207   1      } /* lcd1602Shutdown() */


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    645    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     30    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
